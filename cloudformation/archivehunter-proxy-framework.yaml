AWSTemplateFormatVersion: '2010-09-09'
Description: Proxying framework for ArchiveHunter
Parameters:
  App:
    Type: String
    Description: Application identifier for RiffRaff
    Default: archivehunter
  Stack:
    Type: String
    Description: Stack identifier for RiffRaff
    Default: multimedia
  Stage:
    Type: String
    AllowedValues:
    - CODE
    - DEV
    - PROD
    Description: Deployment stage
  MainAppRole:
    Type: String
    Description: Name (NOT arn) of the role that is being used by instances of the main app. This is to allow them to assume the management role defined here.
  ProxyingTaskImageRef:
    Description: Docker path to the image used for proxying.
    Type: String
    Default: guardianmultimedia/archivehunter-proxying:90
  DeploySubnets:
    Description: Subnets to deploy into.
    Type: List<AWS::EC2::Subnet::Id>
  VideoTranscodingPresetId:
    Description: ETS Preset ID to use when transcoding video proxies
    Type: String
    Default: 1387374611767-d52fja
  AudioTranscodingPresetId:
    Description: ETS Preset ID to use when transcoding video proxies
    Type: String
    Default: 1351620000001-300040

Mappings:
  RegionalBuckets:
    eu-west-1:
      Name: gnm-multimedia-rr-deployables
    us-east-1:
      Name: gnm-multimedia-use1-deployables
    ap-south-1:
      Name: gnm-multimedia-aps1-deployables

Resources:
  InputTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: !GetAtt RequestLambda.Arn
        Protocol: lambda

  ReplyTopic:
    Type: AWS::SNS::Topic

  RequestLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref InputTopic
      FunctionName: !GetAtt RequestLambda.Arn

  RequestLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: AccessBucket
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            - ec2:DescribeInstances
            - ec2:DescribeInstanceStatus
            - ec2:DescribeTags
            Resource: "*"
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "*"
      - PolicyName: ContainerAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Action:
            - ecs:List*
            - ecs:Describe*
            - ecs:*Task
            Resource:
            - !GetAtt ProxyingCluster.Arn
            - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task/*
            - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/*
      - PolicyName: ContainerRoleAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Action:
            - iam:PassRole
            Resource:
            - !GetAtt ProxyGeneratorRole.Arn
            - !GetAtt TranscodingRole.Arn
      - PolicyName: SNSAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Action:
            - sns:Publish
            Resource:
            - !Ref ReplyTopic
      - PolicyName: FloodQueue
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Action:
              - sqs:SendMessage
            Resource:
              - !GetAtt FloodQueue.Arn
      - PolicyName: TranscoderAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - "elastictranscoder:*"
            Resource:
            - !Sub arn:aws:elastictranscoder:${AWS::Region}:${AWS::AccountId}:pipeline/*
            - !Sub arn:aws:elastictranscoder:${AWS::Region}:${AWS::AccountId}:job/*
            - !Sub arn:aws:elastictranscoder:${AWS::Region}:${AWS::AccountId}:preset/${VideoTranscodingPresetId}
            - !Sub arn:aws:elastictranscoder:${AWS::Region}:${AWS::AccountId}:preset/${AudioTranscodingPresetId}
          - Effect: Allow
            Action:
              - elastictranscoder:CreatePipeline
              - elastictranscoder:ListPipelines
            Resource: "*"

  # This role is assumed by the main app via STS to submit jobs and to connect to the reply topic
  ManagementRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
              - !Sub arn:aws:iam::${AWS::AccountId}:root
              - !Sub arn:aws:sts::${AWS::AccountId}:role/${MainAppRole}
            Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: AttachDetach
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
              - sns:Subscribe
              - sns:Unsubscribe
              Resource: !Ref ReplyTopic
            - Effect: Allow
              Action:
              - sns:Publish
              Resource: !Ref InputTopic

  RequestLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !FindInMap [RegionalBuckets, !Ref "AWS::Region", Name]
        S3Key: !Sub ${Stack}/${Stage}/archivehunter-proxyrequest-lambda/proxyRequestLambda.jar
      Environment:
        Variables:
          CLUSTER_NAME: !Ref ProxyingCluster
          TASK_DEFINITION: !Ref ProxyingTaskDefinition
          TASK_CONTAINER: !Sub ${Stack}-${App}Proxy-${Stage}
          SUBNET_LIST: !Join [",",!Ref DeploySubnets]
          REPLY_TOPIC_ARN: !Ref ReplyTopic
          ETS_ROLE_ARN: !GetAtt TranscodingRole.Arn
          ETS_MESSAGE_TOPIC: !Ref TranscoderReplyTopic
          VIDEO_PRESET_ID: !Ref VideoTranscodingPresetId
          AUDIO_PRESET_ID: !Ref AudioTranscodingPresetId
          FLOOD_QUEUE: !Ref FloodQueue
      Handler: RequestLambdaMain
      FunctionName: !Sub archivehunter-requestlambda-${Stage}
      MemorySize: 768
      Role: !GetAtt RequestLambdaRole.Arn
      Runtime: java8
      Timeout: 60
      DeadLetterConfig:
        TargetArn: !GetAtt FloodQueue.Arn
      Tags:
      - Key: App
        Value: !Ref App
      - Key: Stack
        Value: !Ref Stack
      - Key: Stage
        Value: !Ref Stage
      Description: Handle analyse/thumbnail requests from ArchiveHunter

  ProxyGeneratorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: BucketScanAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Action:
            - s3:ListBucket
            - s3:GetObject
            - s3:PutObject
            Resource:
            - arn:aws:s3:::archivehunter-*
            - arn:aws:s3:::archivehunter-*/*
            - arn:aws:s3:::gnm-multimedia-*
            - arn:aws:s3:::gnm-multimedia-*/*
            - arn:aws:s3:::mm-archive-*
            - arn:aws:s3:::mm-archive-*/*
      - PolicyName: ReplyTopicAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Action:
              - sns:Publish
            Resource:
              - !Ref ReplyTopic
      - PolicyName: LogsAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            - "logs:DescribeLogStreams"
            Resource:
            - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
      - PolicyName: ImageDownloadAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Action:
            - "ecr:BatchCheckLayerAvailability"
            - "ecr:BatchGetImage"
            - "ecr:GetDownloadUrlForLayer"
            - "ecr:GetAuthorizationToken"
            - ecr:GetAuthorizationToken
            Resource: "*"

  ProxyingCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${Stack}-${App}proxy-${Stage}

  ProxyingTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 5

  ProxyingTaskDefinition:
    #this is used to register the image that runs proxying tasks.  Specific commands are run via overrides.
    # See ContainerTaskManager for details.
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !GetAtt ProxyGeneratorRole.Arn
      ContainerDefinitions:
      - Image: !Ref ProxyingTaskImageRef #specified in "resources"
        MemoryReservation: 2048 #this is the limit of memory rather than the actual amount allocated
        Name: !Sub ${Stack}-${App}Proxy-${Stage}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref ProxyingTaskLogGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: ecs
      Cpu: 4096 #4 vCPU
      NetworkMode: awsvpc
      Memory: 8192  #minimum allowed with 4 vCPU
      RequiresCompatibilities:
      - FARGATE
      TaskRoleArn: !GetAtt ProxyGeneratorRole.Arn

  #see https://docs.aws.amazon.com/elastictranscoder/latest/developerguide/access-control.html
  TranscodingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: elastictranscoder.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: BucketRead
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Sid: '1'
            Effect: Allow
            Action:
            - s3:Get*
            - s3:ListBucket
            - s3:Put*
            - s3:*MultipartUpload*
            Resource: "*"
      - PolicyName: SNSPublish
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Sid: '2'
            Effect: Allow
            Action: sns:Publish
            Resource: "*"
      - PolicyName: BlockBucketOps
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Sid: '3'
            Effect: Deny
            Action:
            - sns:*Permission*
            - sns:*Delete*
            - sns:*Remove*
            - s3:*Policy*
            - s3:*Delete*
            Resource: "*"

  TranscoderReplyTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: !GetAtt TranscoderReplyLambda.Arn
        Protocol: lambda

  TranscoderReplyLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !FindInMap [RegionalBuckets, !Ref "AWS::Region", Name]
        S3Key: !Sub ${Stack}/${Stage}/archivehunter-transcoderreply-lambda/transcoderReplyLambda.jar
      Environment:
        Variables:
          REPLY_TOPIC_ARN: !Ref ReplyTopic
          ETS_ROLE_ARN: !GetAtt TranscodingRole.Arn
      Handler: ReplyLambdaMain
      FunctionName: !Sub archivehunter-transcoderreply-${Stage}
      MemorySize: 768
      Role: !GetAtt TranscoderReplyLambdaRole.Arn
      Runtime: java8
      Timeout: 60
      Tags:
      - Key: App
        Value: !Ref App
      - Key: Stack
        Value: !Ref Stack
      - Key: Stage
        Value: !Ref Stage
      Description: Process reply messages from Elastic Transcoder

  TranscoderReplyLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: AccessBucket
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            - ec2:DescribeInstances
            - ec2:DescribeInstanceStatus
            - ec2:DescribeTags
            Resource: "*"
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "*"
      - PolicyName: SNSAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Action:
            - sns:Publish
            Resource:
            - !Ref ReplyTopic
      - PolicyName: ETSPipelines
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Action:
            - elastictranscoder:ListPipelines
            Resource:
            - "*"

  TranscoderLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref TranscoderReplyTopic
      FunctionName: !GetAtt TranscoderReplyLambda.Arn

  SweeperLambdaSchedule:
    Type: AWS::Events::Rule
    Properties:
      Description: Pick up events on the transcoding framework "flood queue"
      ScheduleExpression: rate(1 minute)
      State: ENABLED
      Targets:
        - Arn: !GetAtt SweeperLambda.Arn
          Id: !Sub ${Stack}-${App}Sweeper-${Stage}

  SweeperInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SweeperLambda.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SweeperLambdaSchedule.Arn

  SweeperLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !FindInMap [RegionalBuckets, !Ref "AWS::Region", Name]
        S3Key: !Sub ${Stack}/${Stage}/archivehunter-sweeper-lambda/sweeperLambda.jar
      Environment:
        Variables:
          FLOOD_QUEUE_URL: !Ref FloodQueue
          INPUT_TOPIC_ARN: !Ref InputTopic
          MESSAGE_LIMIT: 20
      Handler: SweeperLambdaMain
      FunctionName: !Sub archivehunter-sweeperlambda-${Stage}
      MemorySize: 512
      Role: !GetAtt SweeperLambdaRole.Arn
      Runtime: java8
      Timeout: 20
      Tags:
        - Key: App
          Value: !Ref App
        - Key: Stack
          Value: !Ref Stack
        - Key: Stage
          Value: !Ref Stage
      Description: Pick up anything left on the flood queue and re-process

  SweeperLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: LambdaNecessities
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeInstances
                  - ec2:DescribeInstanceStatus
                  - ec2:DescribeTags
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Action:
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
                - sqs:DeleteMessageBatch
              Resource:
                - !GetAtt FloodQueue.Arn
        - PolicyName: SNSAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Action:
                - sns:Publish
              Resource:
                - !Ref InputTopic

  FloodQueue:
    Type: AWS::SQS::Queue
    Properties:
      Tags:
        - Key: App
          Value: !Ref App
        - Key: Stack
          Value: !Ref Stack
        - Key: Stage
          Value: !Ref Stage

Outputs:
  InputTopic:
    Description: SNS topic that triggers actions
    Value: !Ref InputTopic
  ReplyTopic:
    Description: SNS topic to notify main app of actions undertaken
    Value: !Ref ReplyTopic
  ManagementRole:
    Description: IAM role to allow connection and management by the main app
    Value: !GetAtt ManagementRole.Arn